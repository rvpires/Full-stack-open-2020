{"ast":null,"code":"let timeoutArr = [];\n\nconst notificationReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'HIDE':\n      return '';\n\n    case 'SHOW':\n      timeoutArr.forEach(element => clearTimeout(element));\n      return {\n        notification: action.data.notification,\n        style: action.data.style\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setNotification = (notification, timeLimit, style) => {\n  return async dispatch => {\n    dispatch({\n      type: 'SHOW',\n      data: {\n        notification,\n        style\n      }\n    });\n    const timeoutId = setTimeout(() => {\n      dispatch({\n        type: 'HIDE',\n        data: {\n          timeoutId\n        }\n      });\n    }, timeLimit * 1000);\n    timeoutArr = timeoutArr.concat([timeoutId]);\n  };\n};\nexport default notificationReducer;","map":{"version":3,"sources":["/home/rvp/Desktop/Full-stack-open-2020/part7/blog/client/src/reducers/notificationReducer.js"],"names":["timeoutArr","notificationReducer","state","action","type","forEach","element","clearTimeout","notification","data","style","setNotification","timeLimit","dispatch","timeoutId","setTimeout","concat"],"mappings":"AAAA,IAAIA,UAAU,GAAG,EAAjB;;AAEA,MAAMC,mBAAmB,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAEnD,UAAQA,MAAM,CAACC,IAAf;AAEA,SAAK,MAAL;AACC,aAAO,EAAP;;AAED,SAAK,MAAL;AACCJ,MAAAA,UAAU,CAACK,OAAX,CAAmBC,OAAO,IAAIC,YAAY,CAACD,OAAD,CAA1C;AACA,aAAO;AAAEE,QAAAA,YAAY,EAAGL,MAAM,CAACM,IAAP,CAAYD,YAA7B;AAA4CE,QAAAA,KAAK,EAAGP,MAAM,CAACM,IAAP,CAAYC;AAAhE,OAAP;;AACD;AACC,aAAOR,KAAP;AATD;AAWA,CAbD;;AAkBA,OAAO,MAAMS,eAAe,GAAG,CAACH,YAAD,EAAeI,SAAf,EAA2BF,KAA3B,KAAqC;AACnE,SAAO,MAAMG,QAAN,IAAkB;AAExBA,IAAAA,QAAQ,CAAE;AAAET,MAAAA,IAAI,EAAE,MAAR;AAAgBK,MAAAA,IAAI,EAAE;AAAED,QAAAA,YAAF;AAAiBE,QAAAA;AAAjB;AAAtB,KAAF,CAAR;AACA,UAAMI,SAAS,GAAGC,UAAU,CAAC,MAAM;AAAEF,MAAAA,QAAQ,CAAC;AAAET,QAAAA,IAAI,EAAE,MAAR;AAAgBK,QAAAA,IAAI,EAAE;AAAEK,UAAAA;AAAF;AAAtB,OAAD,CAAR;AAAiD,KAA1D,EAA4DF,SAAS,GAAG,IAAxE,CAA5B;AACAZ,IAAAA,UAAU,GAAGA,UAAU,CAACgB,MAAX,CAAkB,CAACF,SAAD,CAAlB,CAAb;AACA,GALD;AAMA,CAPM;AAWP,eAAeb,mBAAf","sourcesContent":["let timeoutArr = []\n\nconst notificationReducer = (state = {}, action) => {\n\n\tswitch (action.type) {\n\n\tcase 'HIDE':\n\t\treturn ''\n\n\tcase 'SHOW':\n\t\ttimeoutArr.forEach(element => clearTimeout(element))\n\t\treturn { notification : action.data.notification , style : action.data.style }\n\tdefault:\n\t\treturn state\n\t}\n}\n\n\n\n\nexport const setNotification = (notification, timeLimit , style) => {\n\treturn async dispatch => {\n\n\t\tdispatch(({ type: 'SHOW', data: { notification , style } }))\n\t\tconst timeoutId = setTimeout(() => { dispatch({ type: 'HIDE', data: { timeoutId } }) }, timeLimit * 1000)\n\t\ttimeoutArr = timeoutArr.concat([timeoutId])\n\t}\n}\n\n\n\nexport default notificationReducer"]},"metadata":{},"sourceType":"module"}